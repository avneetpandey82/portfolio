# This workflow builds and pushes a Docker image to Docker Hub
# It runs on push to main branch or manual trigger
name: Docker Build and Push

# Define when the workflow should run
on:
  push:
    branches:
      - main # Triggers on push to main branch
  workflow_dispatch: # Allows manual triggering from GitHub UI

# Environment variables used throughout the workflow
env:
  DOCKER_IMAGE: avneetpandey82/my_portfolio # Base name for the Docker image

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use latest Ubuntu runner
    steps:
      # Step 1: Get the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4 # Uses latest stable version of checkout action

      # Step 2: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Enables advanced Docker build features

      # Step 3: Authenticate with Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Docker Hub username from secrets
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Docker Hub access token from secrets

      # Step 4: Generate metadata for Docker image (tags and labels)
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_IMAGE }} # Base image name
          tags: |
            type=raw,value=latest              # Always tag as latest
            type=sha,format=short              # Also tag with short commit SHA

      # Step 5: Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context (current directory)
          push: true # Push to registry after build
          tags: ${{ steps.meta.outputs.tags }} # Use tags from metadata step
          labels: ${{ steps.meta.outputs.labels }} # Use labels from metadata step
          cache-from: type=gha # Use GitHub Actions cache
          cache-to: type=gha,mode=max # Store build cache for future builds
